"use strict";
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserTableHandle = void 0;
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
const spacetimedb_sdk_1 = require("@clockworklabs/spacetimedb-sdk");
/**
 * Table handle for the table `user`.
 *
 * Obtain a handle from the [`user`] property on [`RemoteTables`],
 * like `ctx.db.user`.
 *
 * Users are encouraged not to explicitly reference this type,
 * but to directly chain method calls,
 * like `ctx.db.user.on_insert(...)`.
 */
class UserTableHandle {
    constructor(tableCache) {
        /**
         * Access to the `identity` unique index on the table `user`,
         * which allows point queries on the field of the same name
         * via the [`UserIdentityUnique.find`] method.
         *
         * Users are encouraged not to explicitly reference this type,
         * but to directly chain method calls,
         * like `ctx.db.user.identity().find(...)`.
         *
         * Get a handle on the `identity` unique index on the table `user`.
         */
        this.identity = {
            // Find the subscribed row whose `identity` column value is equal to `col_val`,
            // if such a row is present in the client cache.
            find: (col_val) => {
                for (let row of this.tableCache.iter()) {
                    if ((0, spacetimedb_sdk_1.deepEqual)(row.identity, col_val)) {
                        return row;
                    }
                }
            },
        };
        this.onInsert = (cb) => {
            return this.tableCache.onInsert(cb);
        };
        this.removeOnInsert = (cb) => {
            return this.tableCache.removeOnInsert(cb);
        };
        this.onDelete = (cb) => {
            return this.tableCache.onDelete(cb);
        };
        this.removeOnDelete = (cb) => {
            return this.tableCache.removeOnDelete(cb);
        };
        // Updates are only defined for tables with primary keys.
        this.onUpdate = (cb) => {
            return this.tableCache.onUpdate(cb);
        };
        this.removeOnUpdate = (cb) => {
            return this.tableCache.removeOnUpdate(cb);
        };
        this.tableCache = tableCache;
    }
    count() {
        return this.tableCache.count();
    }
    iter() {
        return this.tableCache.iter();
    }
}
exports.UserTableHandle = UserTableHandle;
//# sourceMappingURL=user_table.js.map