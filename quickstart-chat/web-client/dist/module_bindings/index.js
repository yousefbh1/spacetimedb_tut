"use strict";
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.
Object.defineProperty(exports, "__esModule", { value: true });
exports.DbConnection = exports.SubscriptionBuilder = exports.RemoteTables = exports.SetReducerFlags = exports.RemoteReducers = exports.User = exports.Message = exports.UserTableHandle = exports.MessageTableHandle = exports.SetName = exports.SendMessage = exports.ClientDisconnected = exports.ClientConnected = void 0;
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
const spacetimedb_sdk_1 = require("@clockworklabs/spacetimedb-sdk");
// Import and reexport all reducer arg types
const client_connected_reducer_js_1 = require("./client_connected_reducer.js");
Object.defineProperty(exports, "ClientConnected", { enumerable: true, get: function () { return client_connected_reducer_js_1.ClientConnected; } });
const client_disconnected_reducer_js_1 = require("./client_disconnected_reducer.js");
Object.defineProperty(exports, "ClientDisconnected", { enumerable: true, get: function () { return client_disconnected_reducer_js_1.ClientDisconnected; } });
const send_message_reducer_js_1 = require("./send_message_reducer.js");
Object.defineProperty(exports, "SendMessage", { enumerable: true, get: function () { return send_message_reducer_js_1.SendMessage; } });
const set_name_reducer_js_1 = require("./set_name_reducer.js");
Object.defineProperty(exports, "SetName", { enumerable: true, get: function () { return set_name_reducer_js_1.SetName; } });
// Import and reexport all table handle types
const message_table_js_1 = require("./message_table.js");
Object.defineProperty(exports, "MessageTableHandle", { enumerable: true, get: function () { return message_table_js_1.MessageTableHandle; } });
const user_table_js_1 = require("./user_table.js");
Object.defineProperty(exports, "UserTableHandle", { enumerable: true, get: function () { return user_table_js_1.UserTableHandle; } });
// Import and reexport all types
const message_type_js_1 = require("./message_type.js");
Object.defineProperty(exports, "Message", { enumerable: true, get: function () { return message_type_js_1.Message; } });
const user_type_js_1 = require("./user_type.js");
Object.defineProperty(exports, "User", { enumerable: true, get: function () { return user_type_js_1.User; } });
const REMOTE_MODULE = {
    tables: {
        message: {
            tableName: "message",
            rowType: message_type_js_1.Message.getTypeScriptAlgebraicType(),
        },
        user: {
            tableName: "user",
            rowType: user_type_js_1.User.getTypeScriptAlgebraicType(),
            primaryKey: "identity",
        },
    },
    reducers: {
        ClientConnected: {
            reducerName: "ClientConnected",
            argsType: client_connected_reducer_js_1.ClientConnected.getTypeScriptAlgebraicType(),
        },
        ClientDisconnected: {
            reducerName: "ClientDisconnected",
            argsType: client_disconnected_reducer_js_1.ClientDisconnected.getTypeScriptAlgebraicType(),
        },
        SendMessage: {
            reducerName: "SendMessage",
            argsType: send_message_reducer_js_1.SendMessage.getTypeScriptAlgebraicType(),
        },
        SetName: {
            reducerName: "SetName",
            argsType: set_name_reducer_js_1.SetName.getTypeScriptAlgebraicType(),
        },
    },
    // Constructors which are used by the DbConnectionImpl to
    // extract type information from the generated RemoteModule.
    //
    // NOTE: This is not strictly necessary for `eventContextConstructor` because
    // all we do is build a TypeScript object which we could have done inside the
    // SDK, but if in the future we wanted to create a class this would be
    // necessary because classes have methods, so we'll keep it.
    eventContextConstructor: (imp, event) => {
        return Object.assign(Object.assign({}, imp), { event });
    },
    dbViewConstructor: (imp) => {
        return new RemoteTables(imp);
    },
    reducersConstructor: (imp, setReducerFlags) => {
        return new RemoteReducers(imp, setReducerFlags);
    },
    setReducerFlagsConstructor: () => {
        return new SetReducerFlags();
    }
};
class RemoteReducers {
    constructor(connection, setCallReducerFlags) {
        this.connection = connection;
        this.setCallReducerFlags = setCallReducerFlags;
    }
    onClientConnected(callback) {
        this.connection.onReducer("ClientConnected", callback);
    }
    removeOnClientConnected(callback) {
        this.connection.offReducer("ClientConnected", callback);
    }
    onClientDisconnected(callback) {
        this.connection.onReducer("ClientDisconnected", callback);
    }
    removeOnClientDisconnected(callback) {
        this.connection.offReducer("ClientDisconnected", callback);
    }
    sendMessage(text) {
        const __args = { text };
        let __writer = new spacetimedb_sdk_1.BinaryWriter(1024);
        send_message_reducer_js_1.SendMessage.getTypeScriptAlgebraicType().serialize(__writer, __args);
        let __argsBuffer = __writer.getBuffer();
        this.connection.callReducer("SendMessage", __argsBuffer, this.setCallReducerFlags.sendMessageFlags);
    }
    onSendMessage(callback) {
        this.connection.onReducer("SendMessage", callback);
    }
    removeOnSendMessage(callback) {
        this.connection.offReducer("SendMessage", callback);
    }
    setName(name) {
        const __args = { name };
        let __writer = new spacetimedb_sdk_1.BinaryWriter(1024);
        set_name_reducer_js_1.SetName.getTypeScriptAlgebraicType().serialize(__writer, __args);
        let __argsBuffer = __writer.getBuffer();
        this.connection.callReducer("SetName", __argsBuffer, this.setCallReducerFlags.setNameFlags);
    }
    onSetName(callback) {
        this.connection.onReducer("SetName", callback);
    }
    removeOnSetName(callback) {
        this.connection.offReducer("SetName", callback);
    }
}
exports.RemoteReducers = RemoteReducers;
class SetReducerFlags {
    constructor() {
        this.sendMessageFlags = 'FullUpdate';
        this.setNameFlags = 'FullUpdate';
    }
    sendMessage(flags) {
        this.sendMessageFlags = flags;
    }
    setName(flags) {
        this.setNameFlags = flags;
    }
}
exports.SetReducerFlags = SetReducerFlags;
class RemoteTables {
    constructor(connection) {
        this.connection = connection;
    }
    get message() {
        return new message_table_js_1.MessageTableHandle(this.connection.clientCache.getOrCreateTable(REMOTE_MODULE.tables.message));
    }
    get user() {
        return new user_table_js_1.UserTableHandle(this.connection.clientCache.getOrCreateTable(REMOTE_MODULE.tables.user));
    }
}
exports.RemoteTables = RemoteTables;
class SubscriptionBuilder extends spacetimedb_sdk_1.SubscriptionBuilderImpl {
}
exports.SubscriptionBuilder = SubscriptionBuilder;
class DbConnection extends spacetimedb_sdk_1.DbConnectionImpl {
    constructor() {
        super(...arguments);
        this.subscriptionBuilder = () => {
            return new SubscriptionBuilder(this);
        };
    }
}
exports.DbConnection = DbConnection;
DbConnection.builder = () => {
    return new spacetimedb_sdk_1.DbConnectionBuilder(REMOTE_MODULE, (imp) => imp);
};
//# sourceMappingURL=index.js.map